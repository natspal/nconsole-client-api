import aQute.bnd.gradle.Bundle
import org.gradle.internal.os.OperatingSystem

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.12.0'
    id 'biz.aQute.bnd.builder' version '6.3.1'
    id "org.gradle.test-retry" version "1.4.1"
    id 'io.github.gradle-nexus.publish-plugin' version '1.1.0'
    id 'signing'
}

def jarVersion = "0.5.9"

def isRelease = System.getenv("BUILD_EVENT") == "release"

// version is the variable the build actually uses.
version = isRelease ? jarVersion : jarVersion + "-SNAPSHOT"

archivesBaseName = 'nconsole-client-api'
group = 'org.natspal'

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

repositories {
    mavenCentral()
    maven { url "https://s01.oss.sonatype.org/content/repositories/releases/" }
    
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.17.2'
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    testImplementation 'com.jayway.jsonpath:json-path:2.7.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.3'
    testImplementation "org.junit.jupiter:junit-jupiter-engine:5.10.3"
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

task bundle(type: Bundle) {
    from sourceSets.main.output
}

jar {
    manifest {
        attributes('Automatic-Module-Name': 'org.natspal.nconsole-client-api')
    }
    bnd (['Implementation-Title': 'Natspal Nconsole client api',
          'Implementation-Version': jarVersion,
          'Implementation-Vendor': 'natspal.org',
          "Import-Package": "!net.i2p.crypto.eddsa.math"]
    )
}

test {
    useJUnitPlatform()
    maxHeapSize = "512m"
    testLogging {
        exceptionFormat = 'full'
        events "started", "passed", "skipped", "failed"
    }
    retry {
        failOnPassedAfterRetry = false
        maxFailures = 5
        maxRetries = 5
    }
    maxParallelForks = Runtime.runtime.availableProcessors()
}

javadoc {
    options.overview = 'src/main/javadoc/overview.html' // relative to source root
    source = sourceSets.main.allJava
    title = "NATSPAL.ORG NCONSOLE CLIENT API"
    excludes = []
    classpath = sourceSets.main.runtimeClasspath
    doLast {
        if (!OperatingSystem.current().isWindows()) {
            exec {
                println "Updating favicon on all html files"
                workingDir 'build/docs/javadoc'
                // Only on linux, mac at this point
                commandLine 'find', '.', '-name', '*.html', '-exec', 'sed', '-i', '-e', 's#<head>#<head><link rel="icon" type="image/ico" href="favicon.ico">#', '{}', ';'
            }
            copy {
                println "Copying images to javadoc folder"
                from 'src/main/javadoc/images'
                into 'build/docs/javadoc'
            }
        }
    }
}

task javadocJar(type: Jar) {
    archiveClassifier.set('javadoc')
    from javadoc
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

// run build before running fat jar to get classes
task fatJar(type: Jar) {
    archiveClassifier.set('fat')
    manifest {
        attributes('Implementation-Title': 'Natspal With Dependencies',
                'Implementation-Version': jarVersion,
                'Implementation-Vendor': 'natspal.org')
    }
    from { configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
    afterEvaluate { // only report on main library not examples
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ['**/examples**'])
        }))
    }
}

artifacts {
    archives javadocJar, sourcesJar
}

nexusPublishing {
    repositories {
        sonatype {
            username = System.getenv('OSSRH_USERNAME')
            password = System.getenv('OSSRH_PASSWORD')
            nexusUrl = uri("https://s01.oss.sonatype.org/service/local/")
            snapshotRepositoryUrl = uri("https://s01.oss.sonatype.org/content/repositories/snapshots/")
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'nconsole-client-api'
                packaging = 'jar'
                groupId = group
                artifactId = archivesBaseName
                description = 'Client library for working with the NATS messaging system.'
                url = 'https://github.com/natspal/nconsole-client-api'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = "natspal"
                        name = "Natspal"
                        email = "info@natspal.org"
                        url = "https://natspal.org"
                    }
                }
                scm {
                    url = 'https://github.com/natspal/nconsole-client-api'
                }
            }
        }
    }
}

if (isRelease) {
    signing {
        def signingKeyId = System.getenv('SIGNING_KEY_ID')
        def signingKey = System.getenv('SIGNING_KEY')
        def signingPassword = System.getenv('SIGNING_PASSWORD')
        useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        sign configurations.archives
        sign publishing.publications.mavenJava
    }
}
